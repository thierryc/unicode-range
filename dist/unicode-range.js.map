{"version":3,"file":"unicode-range.js","sources":["../src/index.ts"],"sourcesContent":["/**\n * @ap.cx/unicode-range\n *\n * @description A collection of utility functions for generating and manipulating Unicode values.\n * @license MIT\n * @author Thierry Charbonnel\n * \n **/\n\n\nexport function range(start: number, end: number): number[] {\n    return Array.from({ length: end - start + 1 }, (_, index) => start + index);\n}\n\nexport function compactRanges(numbers: number[] = []): (number | [number, number])[] {\n    if (numbers.length === 0) {\n        return [];\n    }\n    const sortedNumbers = Array.from(new Set(numbers)).slice().sort((a, b) => a - b);\n    const result: (number | [number, number])[] = [];\n    let start = sortedNumbers[0];\n    let end = sortedNumbers[0];\n    for (let i = 1; i < sortedNumbers.length; i++) {\n        if (sortedNumbers[i] === end + 1) {\n            end = sortedNumbers[i];\n        } else {\n            if (start === end) {\n                result.push(start);\n            } else {\n                result.push([start, end]);\n            }\n            start = end = sortedNumbers[i];\n        }\n    }\n    if (start === end) {\n        result.push(start);\n    } else {\n        result.push([start, end]);\n    }\n    return result;\n}\n\nexport function convertToHexValues(compactRanges: (number | [number, number])[] = []): (string | [string, string])[] {\n    function toHex(value: number): string {\n        return `0x${value.toString(16).toUpperCase().padStart(4, '0')}`;\n    }\n    return compactRanges.map(item => {\n        if (Array.isArray(item)) {\n            return [toHex(item[0]), toHex(item[1])];\n        } else {\n            return toHex(item);\n        }\n    });\n}\n\n\nexport function convertToUnicodeString(compactRanges: (number | [number, number])[] = []): string {\n    function toUnicode(value: number, prefix: string = 'U+'): string {\n        return `${prefix}${value.toString(16).toUpperCase().padStart(4, '0')}`;\n    }\n    return compactRanges.map(item => {\n        if (Array.isArray(item)) {\n            if (typeof item[0] !== 'number' || typeof item[1] !== 'number') {\n                throw new Error('Invalid Unicode range');\n            }\n            return `${toUnicode(item[0])}-${toUnicode(item[1], '')}`;\n        } else {\n            if (typeof item !== 'number') {\n                throw new Error('Invalid Unicode value');\n            }\n            return toUnicode(item);\n        }\n    }).join(', ');\n}\n\nexport function convertStringToCompactRanges(unicodeString: string): (number | [number, number])[] {\n    const ranges = unicodeString.split(', ');\n    function parseHex(hexString: string, s: number = 0): number {\n        if (!Number.isNaN(parseInt(hexString.slice(s), 16))) {\n            return parseInt(hexString.slice(s), 16);\n        }\n    }\n    return ranges.map(range => {\n        const parts = range.split('-');\n        if (parts.length === 1) {\n            return parseHex(parts[0], 2);\n        } else {\n            return [parseHex(parts[0], 2), parseHex(parts[1])];\n        }\n    });\n}\n\nexport function flattenNestedArray(input: (number | [number, number])[]): number[] {\n    const flattenedArray: number[] = [];\n    function isArrayWithRange(item: number | [number, number]): item is [number, number] {\n        return Array.isArray(item) && item.length === 2;\n    }\n    input.forEach(item => {\n        if (isArrayWithRange(item)) {\n            for (let i = item[0]; i <= item[1]; i++) {\n                flattenedArray.push(i);\n            }\n        } else {\n            flattenedArray.push(item);\n        }\n    });\n    return flattenedArray;\n}\n\nexport function getArrayIntersection(array1 = [], array2 = []): number[] {\n    return array1.filter(value => array2.includes(value));\n}\n\nexport function getMissingValues(array1 = [], array2 = []): number[] {\n    return array1.filter(value => !array2.includes(value));\n}\n"],"names":[],"mappings":"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"}